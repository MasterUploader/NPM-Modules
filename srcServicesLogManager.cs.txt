// src/Services/LogManager.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text.Json;
using System.Timers;
using System.Xml.Serialization;
using Microsoft.EntityFrameworkCore;
using NSunitp.Data;
using NSunitp.Models;

namespace NSunitp.Services
{
    public class LogManager
    {
        private readonly LogContext _context;
        private readonly List<LogEntry> _buffer = new List<LogEntry>();
        private readonly object _lock = new object();
        private readonly Timer _timer;
        private readonly int _bufferSize;

        public LogManager(LogContext context, int bufferSize = 50, double flushInterval = 60000)
        {
            _context = context;
            _bufferSize = bufferSize;
            _timer = new Timer(flushInterval); // Configurar el intervalo de tiempo en milisegundos
            _timer.Elapsed += (sender, args) => SaveLogs();
            _timer.Start();

            AppDomain.CurrentDomain.ProcessExit += (s, e) => SaveLogs();
            AppDomain.CurrentDomain.UnhandledException += (s, e) => SaveLogs(e.ExceptionObject as Exception);
        }

 // src/Services/LogManager.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text.Json;
using System.Timers;
using System.Xml.Serialization;
using Microsoft.EntityFrameworkCore;
using NSunitp.Data;
using NSunitp.Models;

namespace NSunitp.Services
{
    public class LogManager
    {
        private readonly LogContext _context;
        private readonly List<LogEntry> _buffer = new List<LogEntry>();
        private readonly object _lock = new object();
        private readonly Timer _timer;
        private readonly int _bufferSize;

        public LogManager(LogContext context, int bufferSize = 50, double flushInterval = 60000)
        {
            _context = context;
            _bufferSize = bufferSize;
            _timer = new Timer(flushInterval); // Configurar el intervalo de tiempo en milisegundos
            _timer.Elapsed += (sender, args) => SaveLogs();
            _timer.Start();

            AppDomain.CurrentDomain.ProcessExit += (s, e) => SaveLogs();
            AppDomain.CurrentDomain.UnhandledException += (s, e) => SaveLogs(e.ExceptionObject as Exception);
        }

        public void AddLog(string message, string level = "INFO", string source = "General", string format = "PLAIN")
        {
            lock (_lock)
            {
                _buffer.Add(new LogEntry 
                { 
                    Message = message, 
                    Timestamp = DateTime.UtcNow, 
                    Level = level, 
                    Source = source,
                    Format = format
                });
                if (_buffer.Count >= _bufferSize)
                {
                    SaveLogs();
                }
            }
        }

        public void AddLog(object obj, string format = "JSON", string level = "INFO", string source = "General")
        {
            string serializedObject = format switch
            {
                "XML" => SerializeToXml(obj),
                "Binary" => Convert.ToBase64String(SerializeToBinary(obj)),
                _ => JsonSerializer.Serialize(obj) // Default to JSON
            };

            AddLog(serializedObject, level, source, format);
        }

        private string SerializeToXml(object obj)
        {
            using (var stringWriter = new StringWriter())
            {
                var serializer = new XmlSerializer(obj.GetType());
                serializer.Serialize(stringWriter, obj);
                return stringWriter.ToString();
            }
        }

        private byte[] SerializeToBinary(object obj)
        {
            using (var memoryStream = new MemoryStream())
            {
                var formatter = new BinaryFormatter();
                formatter.Serialize(memoryStream, obj);
                return memoryStream.ToArray();
            }
        }

        public void SaveLogs()
        {
            lock (_lock)
            {
                try
                {
                    if (_buffer.Any())
                    {
                        _context.Logs.AddRange(_buffer);
                        _context.SaveChanges();
                        _buffer.Clear();
                    }
                }
                catch (Exception ex)
                {
                    // Log exceptions during save operation to a file or external service if possible
                    Console.Error.WriteLine($"Failed to save logs: {ex.Message}");
                }
            }
        }

        private void SaveLogs(Exception ex)
        {
            if (ex != null)
            {
                AddLog($"Unhandled exception: {ex.Message}", "ERROR", "System");
            }
            SaveLogs();
        }
    }
}
