// src/Services/LogManager.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text.Json;
using System.Timers;
using System.Xml.Serialization;
using Microsoft.EntityFrameworkCore;
using NSunitp.Data;
using NSunitp.Models;

namespace NSunitp.Services
{
    public class LogManager
    {
        private readonly LogContext _context;
        private readonly List<LogEntry> _buffer = new List<LogEntry>();
        private readonly object _lock = new object();
        private readonly Timer _timer;
        private readonly int _bufferSize;

        public LogManager(LogContext context, int bufferSize = 50, double flushInterval = 60000)
        {
            _context = context;
            _bufferSize = bufferSize;
            _timer = new Timer(flushInterval); // Configurar el intervalo de tiempo en milisegundos
            _timer.Elapsed += (sender, args) => SaveLogs();
            _timer.Start();

            AppDomain.CurrentDomain.ProcessExit += (s, e) => SaveLogs();
            AppDomain.CurrentDomain.UnhandledException += (s, e) => SaveLogs(e.ExceptionObject as Exception);
        }

        public void AddLog(Dictionary<string, string?> logData)
        {
            lock (_lock)
            {
                var logEntry = new LogEntry
                {
                    LOG_01_DATE = logData.GetValueOrDefault("LOG_01_DATE"),
                    LOG_02_TIME = logData.GetValueOrDefault("LOG_02_TIME"),
                    LOG_03_GUID_CODE = logData.GetValueOrDefault("LOG_03_GUID_CODE"),
                    LOG_04_CODE = logData.GetValueOrDefault("LOG_04_CODE"),
                    LOG_05_ENVIRONMENT = logData.GetValueOrDefault("LOG_05_ENVIRONMENT"),
                    LOG_06_PROCESS = logData.GetValueOrDefault("LOG_06_PROCESS"),
                    LOG_07_USER_CONNECTION = logData.GetValueOrDefault("LOG_07_USER_CONNECTION"),
                    LOG_08_INDICATOR_CODE = logData.GetValueOrDefault("LOG_08_INDICATOR_CODE"),
                    LOG_09_PROGRAM_CODE = logData.GetValueOrDefault("LOG_09_PROGRAM_CODE"),
                    LOG_10_ACTION_TYPE = logData.GetValueOrDefault("LOG_10_ACTION_TYPE"),
                    LOG_11_ACTION_DESCRIPTION = logData.GetValueOrDefault("LOG_11_ACTION_DESCRIPTION"),
                    LOG_12_SERVICE_CODE = logData.GetValueOrDefault("LOG_12_SERVICE_CODE"),
                    LOG_13_SERVICE_DESCRIPTION = logData.GetValueOrDefault("LOG_13_SERVICE_DESCRIPTION"),
                    LOG_14_PROCESS_ACTION = logData.GetValueOrDefault("LOG_14_PROCESS_ACTION"),
                    LOG_15_REFERENCES = logData.GetValueOrDefault("LOG_15_REFERENCES"),
                    LOG_16_ERROR_CODE = logData.GetValueOrDefault("LOG_16_ERROR_CODE"),
                    LOG_17_ERROR_DESCRIPTION = logData.GetValueOrDefault("LOG_17_ERROR_DESCRIPTION"),
                    LOG_18_ERROR_TRACE = logData.GetValueOrDefault("LOG_18_ERROR_TRACE"),
                    LOG_19_CORE_REFERENCES = logData.GetValueOrDefault("LOG_19_CORE_REFERENCES"),
                    LOG_20_CORE_ERROR_CODE = logData.GetValueOrDefault("LOG_20_CORE_ERROR_CODE"),
                    LOG_21_CORE_ERROR_DESCRIPTION = logData.GetValueOrDefault("LOG_21_CORE_ERROR_DESCRIPTION")
                };

                _buffer.Add(logEntry);
                if (_buffer.Count >= _bufferSize)
                {
                    SaveLogs();
                }
            }
        }

        public void SaveLogs()
        {
            lock (_lock)
            {
                try
                {
                    if (_buffer.Any())
                    {
                        _context.Logs.AddRange(_buffer);
                        _context.SaveChanges();
                        _buffer.Clear();
                    }
                }
                catch (Exception ex)
                {
                    // Log exceptions during save operation to a file or external service if possible
                    Console.Error.WriteLine($"Failed to save logs: {ex.Message}");
                }
            }
        }

        private void SaveLogs(Exception? ex)
        {
            if (ex != null)
            {
                var logData = new Dictionary<string, string?>
                {
                    { "LOG_17_ERROR_DESCRIPTION", ex.Message },
                    { "LOG_18_ERROR_TRACE", ex.StackTrace }
                };
                AddLog(logData);
            }
            SaveLogs();
        }
    }
}

